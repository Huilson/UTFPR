Pesquisa PM


diferença entre View Binding vs findViewById<>() no android

O ViewBind gera classes de vinculação de views durante o processo de compilação e usa essas classes para acessar as views em tempo de execução. O tipo de retorno é uma classe gerada pelo View Binding, que contém referências diretas para todas as views em um layout XML.
Por outro lado, o findViewById() retorna uma referência para uma view, mas essa referência precisa ser convertida explicitamente para o tipo correto.
 
O view binding encontra as views somente dentro da hierarquia enquanto o findviewyid procura em todo o layout.


private lateinit var binding: MyLayoutBinding 

override fun onCreate(savedInstanceState: Bundle?) { 
	super.onCreate(savedInstanceState) 
	binding = MyLayoutBinding.inflate(layoutInflater) 
	setContentView(binding.root) 

	binding.textviewHello.text = "Hello World!"
 }


val textViewHello = findViewById<TextView>(R.id.textview_hello)
textViewHello.text = "Hello World!"


lateinit é usado para adiar a inicialização de uma variável não nula que será inicializada posteriormente, enquanto lazy é usado para adiar a inicialização de uma variável até o momento em que ela é acessada pela primeira vez.

lateinit var minhaString: String

fun setup() {
    minhaString = "Hello World"
}

fun main() {
    setup()
    println(minhaString)
}


val minhaString: String by lazy {
    println("Inicializando minhaString")
    "Hello World"
}

fun main() {
    println("Antes da inicialização de minhaString")
    println(minhaString)
    println("Depois da inicialização de minhaString")
    println(minhaString)
}

No exemplo acima, a variável minhaString é declarada como uma propriedade delegada pelo lazy. Quando o código chamar minhaString pela primeira vez, a expressão lambda é executada para inicializar a variável e o valor resultante é armazenado em cache. Nas chamadas subsequentes, o valor armazenado em cache é retornado imediatamente, sem executar novamente a expressão lambda.
